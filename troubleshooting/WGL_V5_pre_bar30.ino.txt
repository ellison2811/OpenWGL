//This code was written to be easy to understand.
//Modify this code as you see fit.
//This code will output data to the Arduino serial monitor.
//Type commands into the Arduino serial monitor to control the EC circuit.
//This code was written in the Arduino 2.0 IDE
//This code was last tested 10/2022

#include <SPI.h>                                      //This library allows you to communicate with SPI devices, with the Arduino as the controller device. (SD CARD)
#include <SD.h>                                       //Enables reading and writing on SD cards.
#include <SoftwareSerial.h>                           //we have to include the SoftwareSerial library, or else we can't use it
#define rx 2                                          //define what pin rx is going to be
#define tx 3                                          //define what pin tx is going to be

File myFile;                                          //Initialize myFile for SD

SoftwareSerial myserial(rx, tx);                      //define how the soft serial port is going to work
const int chipSelect = 14;                            //set our Chip Select (CS) pin to 14

String inputstring = "";                              //a string to hold incoming data from the PC
String sensorstring = "";                             //a string to hold the data from the Atlas Scientific product
boolean input_string_complete = false;                //have we received all the data from the PC
boolean sensor_string_complete = false;               //have we received all the data from the Atlas Scientific product




void setup() {                                        //set up the hardware
  // SD setup
  Serial.begin(9600);                                 //set baud rate for the hardware serial port_0 to 9600
  Serial.print("Initializing SD card...");
  if (!SD.begin(chipSelect)) {                        // if it doesnt begin
    Serial.println("Card failed, or not present");
    // don't do anything more:
    while (1);
  }
  Serial.println("SD initialized.");
  
  // EC sensor setup
  myserial.begin(9600);                               //set baud rate for the software serial port to 9600
  inputstring.reserve(10);                            //set aside some bytes for receiving data from the PC
  sensorstring.reserve(30);                           //set aside some bytes for receiving data from Atlas Scientific product
}


void serialEvent() {                                  //if the hardware serial port_0 receives a char
  inputstring = Serial.readStringUntil(13);           //read the string until we see a <CR>
  input_string_complete = true;                       //set the flag used to tell if we have received a completed string from the PC
}


void loop() {                                         //here we go...
  if (input_string_complete == true) {                //if a string from the PC has been received in its entirety
    myserial.print(inputstring);                      //send that string to the Atlas Scientific product
    myserial.print('\r');                             //add a <CR> to the end of the string
    inputstring = "";                                 //clear the string
    input_string_complete = false;                    //reset the flag used to tell if we have received a completed string from the PC
  }

  if (myserial.available() > 0) {                     //if we see that the Atlas Scientific product has sent a character
    char inchar = (char)myserial.read();              //get the char we just received
    sensorstring += inchar;                           //add the char to the var called sensorstring
    if (inchar == '\r') {                             //if the incoming character is a <CR>
      sensor_string_complete = true;                  //set the flag
    }
  }


  if (sensor_string_complete == true) {               //if a string from the Atlas Scientific product has been received in its entirety
    if (isdigit(sensorstring[0]) == false) {          //if the first character in the string is a digit
      Serial.println(sensorstring);                   //send that string to the PC's serial monitor
    }
    else                                              //if the first character in the string is NOT a digit
    {
      //print_EC_data();                                //then call this function 
      char sensorstring_array[30];                        //we make a char array
      char *EC;                                           //char pointer used in string parsing
      char *TDS;                                          //char pointer used in string parsing
      char *SAL;                                          //char pointer used in string parsing
      char *GRAV;                                         //char pointer used in string parsing
      float f_ec;                                         //used to hold a floating point number that is the EC
      
      sensorstring.toCharArray(sensorstring_array, 30);   //convert the string to a char array 
      EC = strtok(sensorstring_array, ",");               //let's pars the array at each comma
      TDS = strtok(NULL, ",");                            //let's pars the array at each comma
      SAL = strtok(NULL, ",");                            //let's pars the array at each comma
      GRAV = strtok(NULL, ",");                           //let's pars the array at each comma

      Serial.print("EC:");                                //we now print each value we parsed separately
      Serial.println(EC);                                 //this is the EC value

      Serial.print("TDS:");                               //we now print each value we parsed separately
      Serial.println(TDS);                                //this is the TDS value

      Serial.print("SAL:");                               //we now print each value we parsed separately
      Serial.println(SAL);                                //this is the salinity value

      Serial.print("GRAV:");                              //we now print each value we parsed separately
      Serial.println(GRAV);                               //this is the specific gravity
      Serial.println();                                   //this just makes the output easier to read
      
      String dataString = String(EC) + ",";               //create a datastring for writing
      File dataFile = SD.open("datalog.txt", FILE_WRITE); // open the file. note that only one file can be open at a time,
      if (dataFile) {                                     // if the file is available, write to it:
        dataFile.println(dataString);                     // write the data
        dataFile.close();                                 //close the file
        // print to the serial port too:
        Serial.println(dataString);                       //print to serialport
      }
      
      else {                                              // if the file isn't open, pop up an error:
        Serial.println("error opening datalog.txt");
      }
    //f_ec= atof(EC);                                     //uncomment this line to convert the char to a float
    }
    sensorstring = "";                                //clear the string
    sensor_string_complete = false;                   //reset the flag used to tell if we have received a completed string from the Atlas Scientific product
  }
}







void print_EC_data(void) {                            //this function will pars the string  

  char sensorstring_array[30];                        //we make a char array
  char *EC;                                           //char pointer used in string parsing
  char *TDS;                                          //char pointer used in string parsing
  char *SAL;                                          //char pointer used in string parsing
  char *GRAV;                                         //char pointer used in string parsing
  float f_ec;                                         //used to hold a floating point number that is the EC
  
  sensorstring.toCharArray(sensorstring_array, 30);   //convert the string to a char array 
  EC = strtok(sensorstring_array, ",");               //let's pars the array at each comma
  TDS = strtok(NULL, ",");                            //let's pars the array at each comma
  SAL = strtok(NULL, ",");                            //let's pars the array at each comma
  GRAV = strtok(NULL, ",");                           //let's pars the array at each comma

  Serial.print("EC:");                                //we now print each value we parsed separately
  Serial.println(EC);                                 //this is the EC value

  Serial.print("TDS:");                               //we now print each value we parsed separately
  Serial.println(TDS);                                //this is the TDS value

  Serial.print("SAL:");                               //we now print each value we parsed separately
  Serial.println(SAL);                                //this is the salinity value

  Serial.print("GRAV:");                              //we now print each value we parsed separately
  Serial.println(GRAV);                               //this is the specific gravity
  Serial.println();                                   //this just makes the output easier to read
  
//f_ec= atof(EC);                                     //uncomment this line to convert the char to a float
}
























